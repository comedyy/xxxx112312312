//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. To update the generation of this file, modify and re-run Unity.Mathematics.CodeGen.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using System.Diagnostics;

#pragma warning disable 0660, 0661

namespace Deterministics.Math
{
    /// <summary>A 2 component vector of numbers.</summary>
    [DebuggerTypeProxy(typeof(fp2.DebuggerProxy))]
    [System.Serializable]
    [Unity.IL2CPP.CompilerServices.Il2CppEagerStaticClassConstruction]
    public partial struct fp2 : System.IEquatable<fp2>, IFormattable
    {
        /// <summary>x component of the vector.</summary>
        public fp x;
        /// <summary>y component of the vector.</summary>
        public fp y;

        /// <summary>float2 zero value.</summary>
        public static readonly fp2 zero;

        /// <summary>Shorthand for writing float2(1, 0).</summary>
        public static fp2 right
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp2(fp.one, fp.zero);
        }

        /// <summary>Shorthand for writing float2(-1, 0).</summary>
        public static fp2 left
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp2(-fp.one, fp.zero);
        }

        /// <summary>Shorthand for writing float2(0, 1).</summary>
        public static fp2 up
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp2(fp.zero, fp.one);
        }

        /// <summary>Shorthand for writing float2(0, -1).</summary>
        public static fp2 down
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp2(fp.zero, -fp.one);
        }

        /// <summary>Constructs a float2 vector from two number values.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="y">The constructed vector's y component will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp2(fp x, fp y)
        {
            this.x = x;
            this.y = y;
        }

        /// <summary>Constructs a float2 vector from a float2 vector.</summary>
        /// <param name="xy">The constructed vector's xy components will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp2(fp2 xy)
        {
            this.x = xy.x;
            this.y = xy.y;
        }

        /// <summary>Constructs a float2 vector from a single number value by assigning it to every component.</summary>
        /// <param name="v">number to convert to float2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp2(fp v)
        {
            this.x = v;
            this.y = v;
        }

        /// <summary>Constructs a float2 vector from a single bool value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp2(bool v)
        {
            this.x = v ? (fp)(1) : (fp)(0);
            this.y = v ? (fp)(1) : (fp)(0);
        }

        /// <summary>Constructs a float2 vector from a Unity.Mathematics.bool2 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool2 to convert to float2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp2(Unity.Mathematics.bool2 v)
        {
            this.x = v.x ? (fp)(1) : (fp)(0);
            this.y = v.y ? (fp)(1) : (fp)(0);
        }

        /// <summary>Constructs a float2 vector from a single int value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp2(int v)
        {
            this.x = (fp)v;
            this.y = (fp)v;
        }

        /// <summary>Constructs a float2 vector from a Unity.Mathematics.int2 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int2 to convert to float2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp2(Unity.Mathematics.int2 v)
        {
            this.x = (fp)v.x;
            this.y = (fp)v.y;
        }

        /// <summary>Constructs a float2 vector from a single uint value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp2(uint v)
        {
            this.x = (fp)v;
            this.y = (fp)v;
        }

        /// <summary>Constructs a float2 vector from a Unity.Mathematics.uint2 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint2 to convert to float2</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp2(Unity.Mathematics.uint2 v)
        {
            this.x = (fp)v.x;
            this.y = (fp)v.y;
        }

        /// <summary>Implicitly converts a single number value to a float2 vector by assigning it to every component.</summary>
        /// <param name="v">number to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator fp2(fp v) { return new fp2(v); }

        /// <summary>Explicitly converts a single bool value to a float2 vector by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp2(bool v) { return new fp2(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.bool2 vector to a float2 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool2 to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp2(Unity.Mathematics.bool2 v) { return new fp2(v); }

        /// <summary>Explicitly converts a single int value to a float2 vector by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator fp2(int v) { return new fp2(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.int2 vector to a float2 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int2 to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator fp2(Unity.Mathematics.int2 v) { return new fp2(v); }

        /// <summary>Explicitly converts a float2 vector to a Unity.Mathematics.int2 vector by componentwise conversion.</summary>
        /// <param name="v">float2 to convert to Unity.Mathematics.int2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Unity.Mathematics.int2(fp2 v) { return new Unity.Mathematics.int2((int)v.x, (int)v.y); }

        /// <summary>Explicitly converts a float2 vector to a Unity.Mathematics.int2 vector by componentwise conversion.</summary>
        /// <param name="v">float2 to convert to Unity.Mathematics.int2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Unity.Mathematics.float2(fp2 v) { return new Unity.Mathematics.float2(v.x, v.y); }

        /// <summary>Explicitly converts a single uint value to a float2 vector by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator fp2(uint v) { return new fp2(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.uint2 vector to a float2 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint2 to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator fp2(Unity.Mathematics.uint2 v) { return new fp2(v); }

        /// <summary>Returns the result of a componentwise multiplication operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise multiplication.</param>
        /// <returns>float2 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator * (fp2 lhs, fp2 rhs) { return new fp2 (lhs.x * rhs.x, lhs.y * rhs.y); }

        /// <summary>Returns the result of a componentwise multiplication operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise multiplication.</param>
        /// <returns>float2 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator * (fp2 lhs, fp rhs) { return new fp2 (lhs.x * rhs, lhs.y * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise multiplication.</param>
        /// <returns>float2 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator * (fp lhs, fp2 rhs) { return new fp2 (lhs * rhs.x, lhs * rhs.y); }


        /// <summary>Returns the result of a componentwise addition operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise addition.</param>
        /// <returns>float2 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator + (fp2 lhs, fp2 rhs) { return new fp2 (lhs.x + rhs.x, lhs.y + rhs.y); }

        /// <summary>Returns the result of a componentwise addition operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise addition.</param>
        /// <returns>float2 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator + (fp2 lhs, fp rhs) { return new fp2 (lhs.x + rhs, lhs.y + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise addition.</param>
        /// <returns>float2 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator + (fp lhs, fp2 rhs) { return new fp2 (lhs + rhs.x, lhs + rhs.y); }


        /// <summary>Returns the result of a componentwise subtraction operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise subtraction.</param>
        /// <returns>float2 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator - (fp2 lhs, fp2 rhs) { return new fp2 (lhs.x - rhs.x, lhs.y - rhs.y); }

        /// <summary>Returns the result of a componentwise subtraction operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise subtraction.</param>
        /// <returns>float2 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator - (fp2 lhs, fp rhs) { return new fp2 (lhs.x - rhs, lhs.y - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise subtraction.</param>
        /// <returns>float2 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator - (fp lhs, fp2 rhs) { return new fp2 (lhs - rhs.x, lhs - rhs.y); }


        /// <summary>Returns the result of a componentwise division operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise division.</param>
        /// <returns>float2 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator / (fp2 lhs, fp2 rhs) { return new fp2 (lhs.x / rhs.x, lhs.y / rhs.y); }

        /// <summary>Returns the result of a componentwise division operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise division.</param>
        /// <returns>float2 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator / (fp2 lhs, fp rhs) { return new fp2 (lhs.x / rhs, lhs.y / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise division.</param>
        /// <returns>float2 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator / (fp lhs, fp2 rhs) { return new fp2 (lhs / rhs.x, lhs / rhs.y); }


        /// <summary>Returns the result of a componentwise modulus operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise modulus.</param>
        /// <returns>float2 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator % (fp2 lhs, fp2 rhs) { return new fp2 (lhs.x % rhs.x, lhs.y % rhs.y); }

        /// <summary>Returns the result of a componentwise modulus operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise modulus.</param>
        /// <returns>float2 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator % (fp2 lhs, fp rhs) { return new fp2 (lhs.x % rhs, lhs.y % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise modulus.</param>
        /// <returns>float2 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator % (fp lhs, fp2 rhs) { return new fp2 (lhs % rhs.x, lhs % rhs.y); }


        /// <summary>Returns the result of a componentwise increment operation on a float2 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise increment.</param>
        /// <returns>float2 result of the componentwise increment.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator ++ (fp2 val) { return new fp2 (++val.x, ++val.y); }


        /// <summary>Returns the result of a componentwise decrement operation on a float2 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise decrement.</param>
        /// <returns>float2 result of the componentwise decrement.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator -- (fp2 val) { return new fp2 (--val.x, --val.y); }


        /// <summary>Returns the result of a componentwise less than operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator < (fp2 lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs.x < rhs.x, lhs.y < rhs.y); }

        /// <summary>Returns the result of a componentwise less than operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator < (fp2 lhs, fp rhs) { return new Unity.Mathematics.bool2 (lhs.x < rhs, lhs.y < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator < (fp lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs < rhs.x, lhs < rhs.y); }


        /// <summary>Returns the result of a componentwise less or equal operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator <= (fp2 lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs.x <= rhs.x, lhs.y <= rhs.y); }

        /// <summary>Returns the result of a componentwise less or equal operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator <= (fp2 lhs, fp rhs) { return new Unity.Mathematics.bool2 (lhs.x <= rhs, lhs.y <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator <= (fp lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs <= rhs.x, lhs <= rhs.y); }


        /// <summary>Returns the result of a componentwise greater than operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator > (fp2 lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs.x > rhs.x, lhs.y > rhs.y); }

        /// <summary>Returns the result of a componentwise greater than operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator > (fp2 lhs, fp rhs) { return new Unity.Mathematics.bool2 (lhs.x > rhs, lhs.y > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator > (fp lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs > rhs.x, lhs > rhs.y); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator >= (fp2 lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs.x >= rhs.x, lhs.y >= rhs.y); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator >= (fp2 lhs, fp rhs) { return new Unity.Mathematics.bool2 (lhs.x >= rhs, lhs.y >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator >= (fp lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs >= rhs.x, lhs >= rhs.y); }


        /// <summary>Returns the result of a componentwise unary minus operation on a float2 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise unary minus.</param>
        /// <returns>float2 result of the componentwise unary minus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator - (fp2 val) { return new fp2 (-val.x, -val.y); }


        /// <summary>Returns the result of a componentwise unary plus operation on a float2 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise unary plus.</param>
        /// <returns>float2 result of the componentwise unary plus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 operator + (fp2 val) { return new fp2 (+val.x, +val.y); }


        /// <summary>Returns the result of a componentwise equality operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator == (fp2 lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs.x == rhs.x, lhs.y == rhs.y); }

        /// <summary>Returns the result of a componentwise equality operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator == (fp2 lhs, fp rhs) { return new Unity.Mathematics.bool2 (lhs.x == rhs, lhs.y == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator == (fp lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs == rhs.x, lhs == rhs.y); }


        /// <summary>Returns the result of a componentwise not equal operation on two float2 vectors.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator != (fp2 lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs.x != rhs.x, lhs.y != rhs.y); }

        /// <summary>Returns the result of a componentwise not equal operation on a float2 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float2 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator != (fp2 lhs, fp rhs) { return new Unity.Mathematics.bool2 (lhs.x != rhs, lhs.y != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a number value and a float2 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float2 to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool2 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool2 operator != (fp lhs, fp2 rhs) { return new Unity.Mathematics.bool2 (lhs != rhs.x, lhs != rhs.y); }

        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 xx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 xy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(x, y); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { x = value.x; y = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 yx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(y, x); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { y = value.x; x = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 yy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(y, y); }
        }



        /// <summary>Returns the number element at a specified index.</summary>
        unsafe public fp this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (fp2* array = &this) { return ((fp*)array)[index]; }
            }
            set
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (fp* array = &x) { array[index] = value; }
            }
        }

        /// <summary>Returns true if the float2 is equal to a given float2, false otherwise.</summary>
        /// <param name="rhs">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(fp2 rhs) { return x == rhs.x && y == rhs.y; }

        /// <summary>Returns true if the float2 is equal to a given float2, false otherwise.</summary>
        /// <param name="o">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        public override bool Equals(object o) { return o is fp2 converted && Equals(converted); }

        /// <summary>Returns a hash code for the float3.</summary>
        /// <returns>The computed hash code.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() => ((x.RawValue * 0x7AF32C49u) + (y.RawValue * 0xAE131389u) + 0x5D1B165Bu).GetHashCode();

        /// <summary>Returns a string representation of the float2.</summary>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("fp2({0}, {1})", x, y);
        }

        /// <summary>Returns a string representation of the float2 using a specified format and culture-specific format information.</summary>
        /// <param name="format">Format string to use during string formatting.</param>
        /// <param name="formatProvider">Format provider to use during string formatting.</param>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("float2({0}, {1})", x.ToString(format, formatProvider), y.ToString(format, formatProvider));
        }

        internal sealed class DebuggerProxy
        {
            public fp x;
            public fp y;
            public DebuggerProxy(fp2 v)
            {
                x = v.x;
                y = v.y;
            }
        }

    }

    public static partial class fpMath
    {
        /// <summary>Returns a float2 vector constructed from two number values.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="y">The constructed vector's y component will be set to this value.</param>
        /// <returns>float2 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 fp2(fp x, fp y) { return new fp2(x, y); }

        /// <summary>Returns a float2 vector constructed from a float2 vector.</summary>
        /// <param name="xy">The constructed vector's xy components will be set to this value.</param>
        /// <returns>float2 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 fp2(fp2 xy) { return new fp2(xy); }

        /// <summary>Returns a float2 vector constructed from a single number value by assigning it to every component.</summary>
        /// <param name="v">number to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 fp2(fp v) { return new fp2(v); }

        /// <summary>Returns a float2 vector constructed from a single bool value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 fp2(bool v) { return new fp2(v); }

        /// <summary>Return a float2 vector constructed from a Unity.Mathematics.bool2 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool2 to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 fp2(Unity.Mathematics.bool2 v) { return new fp2(v); }

        /// <summary>Returns a float2 vector constructed from a single int value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 fp2(int v) { return new fp2(v); }

        /// <summary>Return a float2 vector constructed from a Unity.Mathematics.int2 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int2 to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 fp2(Unity.Mathematics.int2 v) { return new fp2(v); }

        /// <summary>Returns a float2 vector constructed from a single uint value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 fp2(uint v) { return new fp2(v); }

        /// <summary>Return a float2 vector constructed from a Unity.Mathematics.uint2 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint2 to convert to float2</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 fp2(Unity.Mathematics.uint2 v) { return new fp2(v); }

         /// <summary>
        /// Computes the component-wise square (x * x) of the input argument x.
        /// </summary>
        /// <param name="x">Value to square.</param>
        /// <returns>Returns the square of the input.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2 square(fp2 x)
        {
            return x * x;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Approximately(fp2 num2, Unity.Mathematics.float2 b)
        {
            return Approximately(num2.x, b.x) 
            && Approximately(num2.y, b.y);
        }
    }
}
