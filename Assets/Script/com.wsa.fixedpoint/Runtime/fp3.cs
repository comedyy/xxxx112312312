//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. To update the generation of this file, modify and re-run Unity.Mathematics.CodeGen.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using System.Diagnostics;
using System.Globalization;

#pragma warning disable 0660, 0661

namespace Deterministics.Math
{
    /// <summary>A 3 component vector of numbers.</summary>
    [DebuggerTypeProxy(typeof(fp3.DebuggerProxy))]
    [System.Serializable]
    [Unity.IL2CPP.CompilerServices.Il2CppEagerStaticClassConstruction]
    public partial struct fp3 : System.IEquatable<fp3>, IFormattable
    {
        /// <summary>x component of the vector.</summary>
        public fp x;
        /// <summary>y component of the vector.</summary>
        public fp y;
        /// <summary>z component of the vector.</summary>
        public fp z;

        /// <summary>float3 zero value.</summary>
        public static readonly fp3 zero;
        public static readonly fp3 one = new fp3(fp.one, fp.one, fp.one);

        /// <summary>Shorthand for writing float3(1, 0, 0).</summary>
        public static fp3 right
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp3(fp.one, fp.zero, fp.zero);
        }

        /// <summary>Shorthand for writing float3(-1, 0, 0).</summary>
        public static fp3 left
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp3(-fp.one, fp.zero, fp.zero);
        }

        /// <summary>Shorthand for writing float3(0, 1, 0).</summary>
        public static fp3 up
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp3(fp.zero, fp.one, fp.zero);
        }

        /// <summary>Shorthand for writing float3(0, -1, 0).</summary>
        public static fp3 down
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp3(fp.zero, -fp.one, fp.zero);
        }

        /// <summary>Shorthand for writing float3(0, 0, 1).</summary>
        public static fp3 forward
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp3(fp.zero, fp.zero, fp.one);
        }

        /// <summary>Shorthand for writing float3(0, 0, -1).</summary>
        public static fp3 back
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => new fp3(fp.zero, fp.zero, -fp.one);
        }

        /// <summary>Constructs a float3 vector from three number values.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="y">The constructed vector's y component will be set to this value.</param>
        /// <param name="z">The constructed vector's z component will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(fp x, fp y, fp z)
        {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal fp3(long x, long y, long z)
        {
            this.x.RawValue = x;
            this.y.RawValue = y;
            this.z.RawValue = z;
        }

        /// <summary>Constructs a float3 vector from a number value and a float2 vector.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="yz">The constructed vector's yz components will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(fp x, fp2 yz)
        {
            this.x = x;
            this.y = yz.x;
            this.z = yz.y;
        }

        /// <summary>Constructs a float3 vector from a float2 vector and a number value.</summary>
        /// <param name="xy">The constructed vector's xy components will be set to this value.</param>
        /// <param name="z">The constructed vector's z component will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(fp2 xy, fp z)
        {
            this.x = xy.x;
            this.y = xy.y;
            this.z = z;
        }

        /// <summary>Constructs a float3 vector from a float3 vector.</summary>
        /// <param name="xyz">The constructed vector's xyz components will be set to this value.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(fp3 xyz)
        {
            this.x = xyz.x;
            this.y = xyz.y;
            this.z = xyz.z;
        }

        /// <summary>Constructs a float3 vector from a single number value by assigning it to every component.</summary>
        /// <param name="v">number to convert to float3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(fp v)
        {
            this.x = v;
            this.y = v;
            this.z = v;
        }

        /// <summary>Constructs a float3 vector from a single bool value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(bool v)
        {
            this.x = v ? (fp)(1) : (fp)(0);
            this.y = v ? (fp)(1) : (fp)(0);
            this.z = v ? (fp)(1) : (fp)(0);
        }

        /// <summary>Constructs a float3 vector from a Unity.Mathematics.bool3 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool3 to convert to float3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(Unity.Mathematics.bool3 v)
        {
            this.x = v.x ? (fp)(1) : (fp)(0);
            this.y = v.y ? (fp)(1) : (fp)(0);
            this.z = v.z ? (fp)(1) : (fp)(0);
        }

        /// <summary>Constructs a float3 vector from a single int value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(int v)
        {
            this.x = (fp)v;
            this.y = (fp)v;
            this.z = (fp)v;
        }

        /// <summary>Constructs a float3 vector from a Unity.Mathematics.int3 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int3 to convert to float3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(Unity.Mathematics.int3 v)
        {
            this.x = (fp)v.x;
            this.y = (fp)v.y;
            this.z = (fp)v.z;
        }

        /// <summary>Constructs a float3 vector from a single uint value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(uint v)
        {
            this.x = (fp)v;
            this.y = (fp)v;
            this.z = (fp)v;
        }

        /// <summary>Constructs a float3 vector from a Unity.Mathematics.uint3 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint3 to convert to float3</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp3(Unity.Mathematics.uint3 v)
        {
            this.x = (fp)v.x;
            this.y = (fp)v.y;
            this.z = (fp)v.z;
        }

        /// <summary>Implicitly converts a single number value to a float3 vector by assigning it to every component.</summary>
        /// <param name="v">number to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator fp3(fp v) { return new fp3(v); }

        /// <summary>Explicitly converts a single bool value to a float3 vector by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp3(bool v) { return new fp3(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.bool3 vector to a float3 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool3 to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp3(Unity.Mathematics.bool3 v) { return new fp3(v); }

        /// <summary>Explicitly converts a single int value to a float3 vector by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator fp3(int v) { return new fp3(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.int3 vector to a float3 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int3 to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp3(Unity.Mathematics.int3 v) { return new fp3(v); }

        /// <summary>Explicitly converts a float3 vector to a Unity.Mathematics.int3 vector by componentwise conversion.</summary>
        /// <param name="v">float3 to convert to Unity.Mathematics.int3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Unity.Mathematics.int3(fp3 v) { return new Unity.Mathematics.int3((int)v.x, (int)v.y, (int)v.z); }

        /// <summary>Explicitly converts a float3 vector to a Unity.Mathematics.int3 vector by componentwise conversion.</summary>
        /// <param name="v">float3 to convert to Unity.Mathematics.int3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Unity.Mathematics.float3(fp3 v) { return new Unity.Mathematics.float3(v.x, v.y, v.z); }

        /// <summary>Explicitly converts a single uint value to a float3 vector by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp3(uint v) { return new fp3(v); }

        /// <summary>Explicitly converts a Unity.Mathematics.uint3 vector to a float3 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint3 to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp3(Unity.Mathematics.uint3 v) { return new fp3(v); }

        /// <summary>Returns the result of a componentwise multiplication operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise multiplication.</param>
        /// <returns>float3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator * (fp3 lhs, fp3 rhs) { return new fp3 (lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }

        /// <summary>Returns the result of a componentwise multiplication operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise multiplication.</param>
        /// <returns>float3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator * (fp3 lhs, fp rhs) { return new fp3 (lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise multiplication.</param>
        /// <returns>float3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator * (fp lhs, fp3 rhs) { return new fp3 (lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }

        /// <summary>Returns the result of a componentwise multiplication operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise multiplication.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise multiplication.</param>
        /// <returns>float3 result of the componentwise multiplication.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator * (int lhs, fp3 rhs) { return new fp3 (lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }

        /// <summary>Returns the result of a componentwise addition operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise addition.</param>
        /// <returns>float3 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator + (fp3 lhs, fp3 rhs) { return new fp3 (lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }

        /// <summary>Returns the result of a componentwise addition operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise addition.</param>
        /// <returns>float3 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator + (fp3 lhs, fp rhs) { return new fp3 (lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise addition.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise addition.</param>
        /// <returns>float3 result of the componentwise addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator + (fp lhs, fp3 rhs) { return new fp3 (lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }


        /// <summary>Returns the result of a componentwise subtraction operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise subtraction.</param>
        /// <returns>float3 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator - (fp3 lhs, fp3 rhs) { return new fp3 (lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }

        /// <summary>Returns the result of a componentwise subtraction operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise subtraction.</param>
        /// <returns>float3 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator - (fp3 lhs, fp rhs) { return new fp3 (lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise subtraction.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise subtraction.</param>
        /// <returns>float3 result of the componentwise subtraction.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator - (fp lhs, fp3 rhs) { return new fp3 (lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }


        /// <summary>Returns the result of a componentwise division operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise division.</param>
        /// <returns>float3 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator / (fp3 lhs, fp3 rhs) { return new fp3 (lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }

        /// <summary>Returns the result of a componentwise division operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise division.</param>
        /// <returns>float3 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator / (fp3 lhs, fp rhs) { return new fp3 (lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise division.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise division.</param>
        /// <returns>float3 result of the componentwise division.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator / (fp lhs, fp3 rhs) { return new fp3 (lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }


        /// <summary>Returns the result of a componentwise modulus operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise modulus.</param>
        /// <returns>float3 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator % (fp3 lhs, fp3 rhs) { return new fp3 (lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }

        /// <summary>Returns the result of a componentwise modulus operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise modulus.</param>
        /// <returns>float3 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator % (fp3 lhs, fp rhs) { return new fp3 (lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise modulus.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise modulus.</param>
        /// <returns>float3 result of the componentwise modulus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator % (fp lhs, fp3 rhs) { return new fp3 (lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }


        /// <summary>Returns the result of a componentwise increment operation on a float3 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise increment.</param>
        /// <returns>float3 result of the componentwise increment.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator ++ (fp3 val) { return new fp3 (++val.x, ++val.y, ++val.z); }


        /// <summary>Returns the result of a componentwise decrement operation on a float3 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise decrement.</param>
        /// <returns>float3 result of the componentwise decrement.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator -- (fp3 val) { return new fp3 (--val.x, --val.y, --val.z); }


        /// <summary>Returns the result of a componentwise less than operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator < (fp3 lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }

        /// <summary>Returns the result of a componentwise less than operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator < (fp3 lhs, fp rhs) { return new Unity.Mathematics.bool3 (lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise less than.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise less than.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise less than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator < (fp lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }


        /// <summary>Returns the result of a componentwise less or equal operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator <= (fp3 lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }

        /// <summary>Returns the result of a componentwise less or equal operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator <= (fp3 lhs, fp rhs) { return new Unity.Mathematics.bool3 (lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise less or equal.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise less or equal.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise less or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator <= (fp lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }


        /// <summary>Returns the result of a componentwise greater than operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator > (fp3 lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }

        /// <summary>Returns the result of a componentwise greater than operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator > (fp3 lhs, fp rhs) { return new Unity.Mathematics.bool3 (lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise greater than.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise greater than.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise greater than.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator > (fp lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator >= (fp3 lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator >= (fp3 lhs, fp rhs) { return new Unity.Mathematics.bool3 (lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise greater or equal.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise greater or equal.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise greater or equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator >= (fp lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }


        /// <summary>Returns the result of a componentwise unary minus operation on a float3 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise unary minus.</param>
        /// <returns>float3 result of the componentwise unary minus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator - (fp3 val) { return new fp3 (-val.x, -val.y, -val.z); }


        /// <summary>Returns the result of a componentwise unary plus operation on a float3 vector.</summary>
        /// <param name="val">Value to use when computing the componentwise unary plus.</param>
        /// <returns>float3 result of the componentwise unary plus.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 operator + (fp3 val) { return new fp3 (+val.x, +val.y, +val.z); }


        /// <summary>Returns the result of a componentwise equality operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator == (fp3 lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }

        /// <summary>Returns the result of a componentwise equality operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator == (fp3 lhs, fp rhs) { return new Unity.Mathematics.bool3 (lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise equality.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise equality.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise equality.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator == (fp lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }


        /// <summary>Returns the result of a componentwise not equal operation on two float3 vectors.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator != (fp3 lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }

        /// <summary>Returns the result of a componentwise not equal operation on a float3 vector and a number value.</summary>
        /// <param name="lhs">Left hand side float3 to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side number to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator != (fp3 lhs, fp rhs) { return new Unity.Mathematics.bool3 (lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a number value and a float3 vector.</summary>
        /// <param name="lhs">Left hand side number to use to compute componentwise not equal.</param>
        /// <param name="rhs">Right hand side float3 to use to compute componentwise not equal.</param>
        /// <returns>Unity.Mathematics.bool3 result of the componentwise not equal.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Unity.Mathematics.bool3 operator != (fp lhs, fp3 rhs) { return new Unity.Mathematics.bool3 (lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }

        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xxzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, x, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xyzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, y, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xzxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, z, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xzxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, z, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xzxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, z, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xzyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, z, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xzyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, z, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xzyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, z, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xzzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, z, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xzzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, z, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 xzzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(x, z, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yxzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, x, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yyzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, y, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yzxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, z, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yzxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, z, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yzxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, z, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yzyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, z, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yzyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, z, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yzyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, z, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yzzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, z, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yzzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, z, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 yzzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(y, z, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zxxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, x, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zxyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, x, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zxzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, x, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zxzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, x, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zxzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, x, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zyxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, y, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zyyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, y, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zyzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, y, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zyzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, y, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zyzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, y, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zzxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, z, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zzxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, z, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zzxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, z, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zzyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, z, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zzyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, z, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zzyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, z, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zzzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, z, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zzzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, z, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp4 zzzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp4(z, z, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, y, z); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { x = value.x; y = value.y; z = value.z; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, z, y); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { x = value.x; z = value.y; y = value.z; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 xzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(x, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, x, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, x, z); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { y = value.x; x = value.y; z = value.z; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, y, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, z, x); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { y = value.x; z = value.y; x = value.z; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 yzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(y, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 zxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(z, x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 zxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(z, x, y); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { z = value.x; x = value.y; y = value.z; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 zxz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(z, x, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 zyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(z, y, x); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { z = value.x; y = value.y; x = value.z; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 zyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(z, y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 zyz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(z, y, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 zzx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(z, z, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 zzy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(z, z, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp3 zzz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp3(z, z, z); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 xx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(x, x); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 xy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(x, y); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { x = value.x; y = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 xz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(x, z); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { x = value.x; z = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 yx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(y, x); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { y = value.x; x = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 yy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(y, y); }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 yz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(y, z); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { y = value.x; z = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 zx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(z, x); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { z = value.x; x = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 zy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(z, y); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { z = value.x; y = value.y; }
        }


        /// <summary>Swizzles the vector.</summary>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public fp2 zz
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new fp2(z, z); }
        }



        /// <summary>Returns the number element at a specified index.</summary>
        unsafe public fp this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 3)
                    throw new System.ArgumentException("index must be between[0...2]");
#endif
                fixed (fp3* array = &this) { return ((fp*)array)[index]; }
            }
            set
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 3)
                    throw new System.ArgumentException("index must be between[0...2]");
#endif
                fixed (fp* array = &x) { array[index] = value; }
            }
        }

        /// <summary>Returns true if the float3 is equal to a given float3, false otherwise.</summary>
        /// <param name="rhs">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(fp3 rhs) { return x == rhs.x && y == rhs.y && z == rhs.z; }

        /// <summary>Returns true if the float3 is equal to a given float3, false otherwise.</summary>
        /// <param name="o">Right hand side argument to compare equality with.</param>
        /// <returns>The result of the equality comparison.</returns>
        public override bool Equals(object o) { return o is fp3 converted && Equals(converted); }


        /// <summary>Returns a hash code for the float3.</summary>
        /// <returns>The computed hash code.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() => ((x.RawValue * 0x509B84C9u) + (y.RawValue * 0x91D13847u) +
            (z.RawValue * 0x52F7230Fu) + 0xCF286E83u).GetHashCode();

        /// <summary>Returns a string representation of the float3.</summary>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            var format = "F5";
            var formatProvider = CultureInfo.InvariantCulture.NumberFormat;
            return string.Format(formatProvider, "f3({0}, {1}, {2})", new object[]
            {
                x.ToString(format, formatProvider),
                y.ToString(format, formatProvider),
                z.ToString(format, formatProvider),
            });
        }

        /// <summary>Returns a string representation of the float3 using a specified format and culture-specific format information.</summary>
        /// <param name="format">Format string to use during string formatting.</param>
        /// <param name="formatProvider">Format provider to use during string formatting.</param>
        /// <returns>String representation of the value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("float3({0}, {1}, {2})", x.ToString(format, formatProvider), y.ToString(format, formatProvider), z.ToString(format, formatProvider));
        }

        internal sealed class DebuggerProxy
        {
            public fp x;
            public fp y;
            public fp z;
            public DebuggerProxy(fp3 v)
            {
                x = v.x;
                y = v.y;
                z = v.z;
            }
        }
    }

    public static partial class fpMath
    {
        /// <summary>Returns a float3 vector constructed from three number values.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="y">The constructed vector's y component will be set to this value.</param>
        /// <param name="z">The constructed vector's z component will be set to this value.</param>
        /// <returns>float3 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(fp x, fp y, fp z) { return new fp3(x, y, z); }

        /// <summary>Returns a float3 vector constructed from a number value and a float2 vector.</summary>
        /// <param name="x">The constructed vector's x component will be set to this value.</param>
        /// <param name="yz">The constructed vector's yz components will be set to this value.</param>
        /// <returns>float3 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(fp x, fp2 yz) { return new fp3(x, yz); }

        /// <summary>Returns a float3 vector constructed from a float2 vector and a number value.</summary>
        /// <param name="xy">The constructed vector's xy components will be set to this value.</param>
        /// <param name="z">The constructed vector's z component will be set to this value.</param>
        /// <returns>float3 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(fp2 xy, fp z) { return new fp3(xy, z); }

        /// <summary>Returns a float3 vector constructed from a float3 vector.</summary>
        /// <param name="xyz">The constructed vector's xyz components will be set to this value.</param>
        /// <returns>float3 constructed from arguments.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(fp3 xyz) { return new fp3(xyz); }

        /// <summary>Returns a float3 vector constructed from a single number value by assigning it to every component.</summary>
        /// <param name="v">number to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(fp v) { return new fp3(v); }

        /// <summary>Returns a float3 vector constructed from a single bool value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">bool to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(bool v) { return new fp3(v); }

        /// <summary>Return a float3 vector constructed from a Unity.Mathematics.bool3 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.bool3 to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(Unity.Mathematics.bool3 v) { return new fp3(v); }

        /// <summary>Returns a float3 vector constructed from a single int value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">int to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(int v) { return new fp3(v); }

        /// <summary>Return a float3 vector constructed from a Unity.Mathematics.int3 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.int3 to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(Unity.Mathematics.int3 v) { return new fp3(v); }

        /// <summary>Returns a float3 vector constructed from a single uint value by converting it to number and assigning it to every component.</summary>
        /// <param name="v">uint to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(uint v) { return new fp3(v); }

        /// <summary>Return a float3 vector constructed from a Unity.Mathematics.uint3 vector by componentwise conversion.</summary>
        /// <param name="v">Unity.Mathematics.uint3 to convert to float3</param>
        /// <returns>Converted value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 fp3(Unity.Mathematics.uint3 v) { return new fp3(v); }
        
        /// <summary>
        /// Computes the component-wise square (x * x) of the input argument x.
        /// </summary>
        /// <param name="x">Value to square.</param>
        /// <returns>Returns the square of the input.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp3 square(fp3 x)
        {
            return x * x;
        }


        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Approximately(fp3 num2, Unity.Mathematics.float3 b)
        {
            return Approximately(num2.x, b.x) 
            && Approximately(num2.y, b.y)
            && Approximately(num2.z, b.z);
        }
    }
}
